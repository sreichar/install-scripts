apiVersion: v1
kind: ServiceAccount
metadata:
  name: autoapprover
  namespace: openshift-infra
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: autoapprover
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: autoapprover
  namespace: openshift-infra
---
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: autoapprover
  namespace: openshift-infra
spec:
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: autoapprover
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ''
      serviceAccountName: autoapprover
      terminationGracePeriodSeconds: 1
      containers:
      - name: signer
        image: registry.svc.ci.openshift.org/origin/4.2:cli
        command:
        - /bin/bash
        - -c
        args:
        - |
          #!/bin/bash
          
          cat <<EOScript > /tmp/signer
          #!/bin/bash -x
          #
          # It will approve any CSR that is not approved yet
          #
          set -o errexit
          set -o nounset
          set -o pipefail
          nargs=\${#}
          name=\${1}
          username=\${2}
          if [[ \${nargs} -gt 2 ]] ; then
             condtion=\${3}
             certificate=\${4}
          fi

          # auto approve
          if [[ ( \${nargs} -eq 2 ) && ( "\${username}" == "system:serviceaccount:openshift-infra:node-bootstrapper" || "\${username}" == "system:node:"* || "\${username}" == "system:admin" ) ]]; then
              oc adm certificate approve "\${name}"
              exit 0
          fi
          # check certificate age
          if [[ \${nargs} -gt 2 ]]; then
             text="\$( echo "\${certificate}" | base64 -d - )"
             if ! echo "\${text}" | openssl x509 -noout; then
                echo "error: Unable to parse certificate" 2>&1
                exit 1
             fi
             if ! echo "\${text}" | openssl x509 -checkend -60 > /dev/null; then
               echo "Certificate is expired, deleting"
               oc delete csr "\${name}"
             fi
             exit 0
          fi
          EOScript
          chmod u+x /tmp/signer

          exec oc observe csr --maximum-errors=1 --resync-period=10m -a '{.spec.username}' -a '{.status.conditions[*].type}' -a '{.status.certificate}' -- /tmp/signer
